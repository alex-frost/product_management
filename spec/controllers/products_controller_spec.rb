require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProductsController do

  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes)      { { "name" => "New Product", "net_price" => 1.23 } }
  let(:more_valid_attributes) { { "name" => "Another Product", "net_price" => "1.53" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProductsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all products as @products" do
      product = Product.create! valid_attributes
      get :index, {}, valid_session
      assigns(:products).should eq([product])
    end
  end

  describe "GET show" do
    it "assigns the requested product as @product" do
      product = Product.create! valid_attributes
      get :show, {:id => product.to_param}, valid_session
      assigns(:product).should eq(product)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Product" do
        expect {
          post :create, {:product => valid_attributes}, valid_session
        }.to change(Product, :count).by(1)
      end

      describe "simple POST" do
        before :each do
          post :create, {:product => valid_attributes}, valid_session
        end

        it "assigns a newly created product as @product" do
          assigns(:product).should be_a(Product)
          assigns(:product).should be_persisted
        end

        it "has status created" do
          expect(response.status).to eq(201)
        end
        it "has location" do
          expect(response.location).to include('product')
        end
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved product as @product" do
        # Trigger the behavior that occurs when invalid params are submitted
        Product.any_instance.stub(:save).and_return(false)
        post :create, {:product => { "name" => "invalid value" }}, valid_session
        assigns(:product).should be_a_new(Product)
      end

      it "has status unprocessable_entity" do
        # Trigger the behavior that occurs when invalid params are submitted
        Product.any_instance.stub(:save).and_return(false)
        post :create, {:product => { "name" => "invalid value" }}, valid_session
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested product" do
        product = Product.create! valid_attributes
        # Assuming there are no other products in the database, this
        # specifies that the Product created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Product.any_instance.should_receive(:update).with( more_valid_attributes )
        put :update, {:id => product.to_param, :product => more_valid_attributes}, valid_session
      end

      it "assigns the requested product as @product" do
        product = Product.create! valid_attributes
        put :update, {:id => product.to_param, :product => valid_attributes}, valid_session
        assigns(:product).should eq(product)
      end

      it "has status 204" do
        product = Product.create! valid_attributes
        put :update, {:id => product.to_param, :product => valid_attributes}, valid_session
        expect(response.status).to eq(204)
      end
    end

    describe "with invalid params" do
      it "assigns the product as @product" do
        product = Product.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Product.any_instance.stub(:save).and_return(false)
        put :update, {:id => product.to_param, :product => { "name" => "invalid value" }}, valid_session
        assigns(:product).should eq(product)
      end

      it "has status unprocessable_entity" do
        product = Product.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Product.any_instance.stub(:save).and_return(false)
        put :update, {:id => product.to_param, :product => { "name" => "invalid value" }}, valid_session
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE destroy" do
    context "when no referenced in an order" do
      it "destroys the requested product" do
        product = Product.create! valid_attributes
        expect {
          delete :destroy, {:id => product.to_param}, valid_session
        }.to change(Product, :count).by(-1)
      end

      it "has status 204" do
        product = Product.create! valid_attributes
        delete :destroy, {:id => product.to_param}, valid_session
        expect(response.status).to eq(204)
      end
    end

    context "when referenced in an order" do
      let(:product) { product = Product.create! valid_attributes }

      before :each do
        order = Order.create! ( {"date" => "2014-05-23", "status" => "DRAFT"} )
        order.line_items.create! ( { "quantity" => 1, "product_id" => product.to_param } )
      end

      it "does not destroy product" do
        expect {
          delete :destroy, {:id => product.to_param}, valid_session
        }.to change(Product, :count).by(0)
      end

      it "has error message" do
        delete :destroy, {:id => product.to_param}, valid_session
        expect(response.status).to eq(403)
        expect(response.body).to eq("Product is referenced in an order, cannot be deleted")
      end

    end
  end

end
